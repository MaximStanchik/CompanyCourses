import React, { useEffect, useState, useRef } from 'react';
import { useHistory } from 'react-router-dom';
import i18n from '../i18n';
import { FaExpand } from 'react-icons/fa';

function usePrefersDark() {
  const [dark, setDark] = React.useState(() => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);
  React.useEffect(() => {
    const mq = window.matchMedia('(prefers-color-scheme: dark)');
    const handler = e => setDark(e.matches);
    mq.addEventListener('change', handler);
    return () => mq.removeEventListener('change', handler);
  }, []);
  return dark;
}

const Support = () => {
  const history = useHistory();
  const t = i18n.t.bind(i18n);
  const textareaRef = useRef(null);

  const [lang, setLang] = useState(i18n.language || localStorage.getItem('appLang') || 'en');
  const [message, setMessage] = useState('');
  const [fullscreen, setFullscreen] = useState(false);
  const [linkDialogOpen, setLinkDialogOpen] = useState(false);
  const [linkName, setLinkName] = useState('');
  const [linkUrl, setLinkUrl] = useState('');
  const [imageDialogOpen, setImageDialogOpen] = useState(false);
  const [imageUrl, setImageUrl] = useState('');
  const [imageFile, setImageFile] = useState(null);
  const [codeDialogOpen, setCodeDialogOpen] = useState(false);
  const [codeContent, setCodeContent] = useState('');
  const [codeLanguage, setCodeLanguage] = useState('Text');
  const [showInvisibleChars, setShowInvisibleChars] = useState(false);
  const [showLineNumbers, setShowLineNumbers] = useState(false);
  const [emojiDialogOpen, setEmojiDialogOpen] = useState(false);
  const [activeEmojiTab, setActiveEmojiTab] = useState('smileys');
  const [emojiSearch, setEmojiSearch] = useState('');
  const emojiButtonRef = useRef(null);
  const [emojiPosition, setEmojiPosition] = useState({ top: 0, left: 0 });
  const [theme, setTheme] = useState(localStorage.getItem('theme') || null); // null=auto, 'dark', 'light'
  const prefersDark = usePrefersDark();
  const dark = theme ? theme === 'dark' : prefersDark;

  const availableLangs = [
    { code: 'en', label: 'EN' },
    { code: 'ru', label: 'RU' },
    { code: 'de', label: 'DE' },
    { code: 'es', label: 'ES' },
    { code: 'pt', label: 'PT' },
    { code: 'uk', label: 'UK' },
    { code: 'zh', label: 'ZH' },
    { code: 'be', label: 'BE' },
  ];

  const handleLangChange = (code) => {
    i18n.changeLanguage(code);
    localStorage.setItem('appLang', code);
    // –ù–µ –Ω–∞–¥–æ setLang –∑–¥–µ—Å—å ‚Äî –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ languageChanged
  };

  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(null);
  const [error, setError] = useState(null);

  const handleSubmit = async () => {
    if (message.trim().length === 0) {
      setError(t('support.messageEmpty') || '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    if (message.length > 2000) {
      setError(t('support.messageTooLong') || '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ');
      return;
    }
    setLoading(true);
    setSuccess(null);
    setError(null);
    try {
      const token = localStorage.getItem('jwtToken');
      if (!token) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        setLoading(false);
        return;
      }
      const response = await fetch('/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          subject: 'Support Message from User',
          text: message,
        }),
      });
      if (response.ok) {
        setSuccess(t('support.messageSentSuccess') || '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        setMessage('');
      } else {
        const errorData = await response.json();
        setError(errorData.error || t('support.messageSendFailed') || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    } catch (err) {
      setError(t('support.messageSendFailed') || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const insertTag = (startTag, endTag = '') => {
    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selected = message.substring(start, end);
    const before = message.substring(0, start);
    const after = message.substring(end);
    const newText = before + startTag + selected + endTag + after;
    setMessage(newText);
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start + startTag.length, end + startTag.length);
    }, 0);
  };

  const insertLink = () => {
    if (linkName && linkUrl) {
      const linkTag = `<a href='${linkUrl}'>${linkName}</a>`;
      const textarea = textareaRef.current;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selected = message.substring(start, end);
      const before = message.substring(0, start);
      const after = message.substring(end);
      const newText = before + linkTag + after;
      setMessage(newText);
      setLinkDialogOpen(false);
      setLinkName('');
      setLinkUrl('');
    }
  };

  const insertImage = () => {
    if (imageUrl) {
      const imgTag = `<img src='${imageUrl}' alt='Image' style='max-width: 100%;' />`;
      const textarea = textareaRef.current;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const before = message.substring(0, start);
      const after = message.substring(end);
      const newText = before + imgTag + after;
      setMessage(newText);
      setImageDialogOpen(false);
      setImageUrl('');
      setImageFile(null);
    } else if (imageFile) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imgTag = `<img src='${e.target.result}' alt='${imageFile.name}' style='max-width: 100%;' />`;
        const textarea = textareaRef.current;
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const before = message.substring(0, start);
        const after = message.substring(end);
        const newText = before + imgTag + after;
        setMessage(newText);
      };
      reader.readAsDataURL(imageFile);
      setImageDialogOpen(false);
      setImageUrl('');
      setImageFile(null);
    }
  };

  const handleImageFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setImageFile(file);
      setImageUrl('');
    }
  };

  const insertCode = () => {
    if (codeContent) {
      const codeTag = `<pre><code language='${codeLanguage.toLowerCase()}'>${codeContent}</code></pre>`;
      const textarea = textareaRef.current;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const before = message.substring(0, start);
      const after = message.substring(end);
      const newText = before + codeTag + after;
      setMessage(newText);
      setCodeDialogOpen(false);
      setCodeContent('');
      setCodeLanguage('Text');
    }
  };

  const insertEmoji = (emoji) => {
    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const before = message.substring(0, start);
    const after = message.substring(end);
    const newText = before + emoji + after;
    setMessage(newText);
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(start + emoji.length, start + emoji.length);
    }, 0);
  };

  const toggleEmojiDialog = () => {
    if (!emojiDialogOpen) {
      const rect = emojiButtonRef.current.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      const viewportWidth = window.innerWidth;
      const dialogHeight = 400; // Approximate height of the dialog
      const dialogWidth = 450; // Approximate width of the dialog
      let top = rect.top - dialogHeight - 10; // Try to position above by default
      let left = rect.left;
      // Adjust top if it goes off-screen
      if (top < 0) {
        top = rect.bottom + 10; // Position below if not enough space above
      }
      if (top + dialogHeight > viewportHeight) {
        top = viewportHeight - dialogHeight - 10; // Adjust to fit within viewport
      }
      // Adjust left if it goes off-screen
      if (left + dialogWidth > viewportWidth) {
        left = viewportWidth - dialogWidth - 10; // Adjust to fit within viewport
      }
      if (left < 0) {
        left = 10; // Ensure it doesn't go off the left edge
      }
      setEmojiPosition({ top, left });
    }
    setEmojiDialogOpen(!emojiDialogOpen);
  };

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  useEffect(() => {
    const onLanguageChanged = (lng) => {
      setLang(lng);
    };

    i18n.on('languageChanged', onLanguageChanged);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    setLang(i18n.language);

    return () => {
      i18n.off('languageChanged', onLanguageChanged);
    };
  }, []);

  // 1. –î–æ–±–∞–≤–ª—è—é emojiNameMap –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  const emojiNameMap = {
    'üòÄ': ['grinning face', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', 'smile'],
    'üòÅ': ['beaming face', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', 'smile'],
    'üòÇ': ['face with tears of joy', '—Å–º–µ—Ö', '—Ä–∞–¥–æ—Å—Ç—å', 'joy', 'lol'],
    'ü§£': ['rolling on the floor laughing', '—Ä–∂—É', '—Å–º–µ—Ö', 'lol'],
    'üòÉ': ['smiling face with open mouth', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', 'smile'],
    'üòÑ': ['smiling face with open mouth & smiling eyes', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', 'smile'],
    'üòÖ': ['smiling face with sweat', '—É–ª—ã–±–∫–∞', '–ø–æ—Ç', 'smile', 'sweat'],
    'üòÜ': ['smiling face with closed eyes', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', '—Å–º–µ—Ö', 'smile'],
    'üòâ': ['winking face', '–ø–æ–¥–º–∏–≥–∏–≤–∞–Ω–∏–µ', 'wink'],
    'üòä': ['smiling face with smiling eyes', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', 'smile'],
    'üòã': ['face savoring food', '–≤–∫—É—Å–Ω–æ', '–µ–¥–∞', 'yum', 'food'],
    'üòé': ['smiling face with sunglasses', '–∫—Ä—É—Ç–æ', '–æ—á–∫–∏', 'cool', 'sunglasses'],
    'üòç': ['heart eyes', '–≤–ª—é–±–ª–µ–Ω', '–ª—é–±–æ–≤—å', 'love', 'heart'],
    'üòò': ['face blowing a kiss', '–ø–æ—Ü–µ–ª—É–π', 'kiss'],
    'ü•∞': ['smiling face with hearts', '–≤–ª—é–±–ª–µ–Ω', '–ª—é–±–æ–≤—å', 'love', 'hearts'],
    'üòó': ['kissing face', '–ø–æ—Ü–µ–ª—É–π', 'kiss'],
    'üòô': ['kissing face with smiling eyes', '–ø–æ—Ü–µ–ª—É–π', '—É–ª—ã–±–∫–∞', 'kiss', 'smile'],
    'üòö': ['kissing face with closed eyes', '–ø–æ—Ü–µ–ª—É–π', '—É–ª—ã–±–∫–∞', 'kiss', 'smile'],
    'üôÇ': ['slightly smiling face', '—É–ª—ã–±–∫–∞', '—É–ª—ã–±–∞–µ—Ç—Å—è', 'smile'],
    'ü§ó': ['hugging face', '–æ–±–Ω–∏–º–∞–µ—Ç', '–æ–±—ä—è—Ç–∏—è', 'hug'],
    'ü§©': ['star-struck', '–∑–≤–µ–∑–¥–∞', '–≤–æ—Å—Ç–æ—Ä–≥', '–∑–≤—ë–∑–¥—ã', 'star'],
    'ü§î': ['thinking face', '–¥—É–º–∞–µ—Ç', 'think'],
    'ü§®': ['face with raised eyebrow', '—Å–æ–º–Ω–µ–Ω–∏–µ', '—Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è', 'raise eyebrow'],
    'üòê': ['neutral face', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ', 'neutral'],
    'üòë': ['expressionless face', '–±–µ–∑ —ç–º–æ—Ü–∏–π', 'expressionless'],
    'üò∂': ['face without mouth', '–º–æ–ª—á–∏—Ç', '–±–µ–∑ —Ä—Ç–∞', 'silent'],
    'üôÑ': ['face with rolling eyes', '–∑–∞–∫–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–∑–∞', 'roll eyes'],
    'üòè': ['smirking face', '—É—Ö–º—ã–ª–∫–∞', 'smirk'],
    // ... (–¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é)
  };

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) setTheme(savedTheme);
    const onStorage = (e) => {
      if (e.key === 'theme') setTheme(e.newValue);
    };
    window.addEventListener('storage', onStorage);
    return () => window.removeEventListener('storage', onStorage);
  }, []);

  useEffect(() => {
    if (theme) localStorage.setItem('theme', theme);
    document.body.setAttribute('data-theme', dark ? 'dark' : 'light');
  }, [theme, dark]);

  return (
    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto', fontFamily: 'Arial, sans-serif' }}>
      <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '20px' }}>
        <select
          aria-label="Select language"
          value={lang}
          onChange={(e) => handleLangChange(e.target.value)}
          style={{
            padding: '0.4rem 1rem',
            borderRadius: '20px',
            border: `1px solid rgb(0, 123, 255)`,
            background: 'white',
            color: 'rgb(0, 123, 255)',
            fontWeight: 'bold',
            cursor: 'pointer',
            marginRight: '10px',
            fontSize: '1rem',
          }}
        >
          {availableLangs.map((l) => (
            <option key={l.code} value={l.code}>
              {l.label}
            </option>
          ))}
        </select>
        <button
          style={{
            padding: '0.5rem 1.5rem',
            backgroundColor: '#3976a8',
            color: '#fff',
            border: 'none',
            borderRadius: 20,
            cursor: 'pointer',
            fontSize: '1rem',
            transition: '0.3s',
            marginRight: 10,
          }}
          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
        >
          {dark ? t('navbar.light_mode') : t('navbar.dark_mode')}
        </button>
        <button
          style={{
            padding: '0.5rem 1.5rem',
            backgroundColor: 'rgb(0, 123, 255)',
            color: 'white',
            border: 'none',
            borderRadius: '20px',
            cursor: 'pointer',
            fontSize: '1rem',
          }}
          onClick={() => history.push('/')}
        >
          {t('support.backToMain')}
        </button>
      </div>
      <h1>{t('support.title')}</h1>
      <p>{t('support.description')}</p>
      <p>{t('support.messageInfo')}</p>
      <div style={{ marginTop: '20px' }}>
        <label htmlFor="supportMessage" style={{ display: 'block', marginBottom: '10px', fontWeight: 'bold' }}>
          {t('support.enterMessage')}
        </label>
        <div style={{ position: 'relative', marginBottom: '10px' }}>
          {/* –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–≤–∞ */}
          <div
            style={{
              position: 'absolute',
              top: '5px',
              left: '5px',
              zIndex: 1,
              display: 'flex',
              gap: '4px',
            }}
          >
            <button title="Bold" onClick={() => insertTag('<strong>', '</strong>')}>
              ùêÅ
            </button>
            <button title="Italic" onClick={() => insertTag('<em>', '</em>')}>
              ùë∞
            </button>
            <button title="Underline" onClick={() => insertTag('<u>', '</u>')}>
              UÃ≤
            </button>
            <button title="Strikethrough" onClick={() => insertTag('<s>', '</s>')}>
              SÃ∂
            </button>
            <button title="Emoji" ref={emojiButtonRef} onClick={toggleEmojiDialog}>
              üòä
            </button>
            <button title="Link" onClick={() => setLinkDialogOpen(true)}>üîó</button>
            <button title="Image" onClick={() => setImageDialogOpen(true)}>üñºÔ∏è</button>
            <button title="Code" onClick={() => setCodeDialogOpen(true)}>&lt;/&gt;</button>
          </div>
          {/* –ö–Ω–æ–ø–∫–∞ "–£–≤–µ–ª–∏—á–∏—Ç—å" —Å–ø—Ä–∞–≤–∞ */}
          <div style={{ position: 'absolute', top: '5px', right: '5px', zIndex: 1 }}>
            <button
              title="–£–≤–µ–ª–∏—á–∏—Ç—å"
              onClick={() => setFullscreen(true)}
              style={{ background: 'none', border: 'none', cursor: 'pointer', padding: '4px' }}
            >
              <FaExpand size={20} color={dark ? '#ffe082' : '#3976a8'} />
            </button>
          </div>
          {/* –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ */}
          <div style={{ position: 'absolute', bottom: '5px', right: '10px', fontSize: '0.8rem', color: message.length > 2000 ? 'red' : 'inherit' }}>
            {message.length}/2000
          </div>
          <textarea
            id="supportMessage"
            ref={textareaRef}
            placeholder={t('support.placeholder')}
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            style={{
              width: '100%',
              minHeight: '150px',
              padding: '40px 10px 25px 10px',
              fontSize: '1rem',
              borderRadius: '8px',
              border: '1px solid #ccc',
              resize: 'vertical',
            }}
          />
        </div>
        <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '15px' }}>
          <button
            onClick={handleSubmit}
            style={{
              padding: '0.5rem 2rem',
              backgroundColor: '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '20px',
              cursor: 'pointer',
              fontSize: '1rem',
            }}
            disabled={loading}
          >
            {loading ? (t('support.sending') || '–û—Ç–ø—Ä–∞–≤–∫–∞...') : (t('support.send') || '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')}
          </button>
        </div>
        {success && <div style={{ color: '#27ae60', fontWeight: 500, marginTop: 12 }}>{success}</div>}
        {error && <div style={{ color: '#e74c3c', fontWeight: 500, marginTop: 12 }}>{error}</div>}
      </div>

      {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä */}
      {fullscreen && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.5)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
          onClick={() => setFullscreen(false)}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              backgroundColor: 'white',
              width: '95%',
              height: '90%',
              padding: '20px',
              borderRadius: '8px',
              position: 'relative',
              display: 'flex',
              flexDirection: 'column',
            }}
          >
            <h2 style={{ marginBottom: '10px' }}>{t('support.enhancedEditor') || '–†–µ–¥–∞–∫—Ç–æ—Ä'}</h2>
            <textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder={t('support.placeholder')}
              style={{
                flex: 1,
                width: '100%',
                fontSize: '1rem',
                padding: '10px',
                border: '1px solid #ccc',
                borderRadius: '4px',
                resize: 'none',
              }}
            />
            <div style={{ textAlign: 'right', marginTop: '10px' }}>
              <button
                onClick={() => setFullscreen(false)}
                style={{
                  backgroundColor: '#007bff',
                  color: 'white',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                }}
              >
                {t('support.close') || '–ó–∞–∫—Ä—ã—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Link Dialog */}
      {linkDialogOpen && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.5)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
          onClick={() => setLinkDialogOpen(false)}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              backgroundColor: 'white',
              width: '400px',
              padding: '20px',
              borderRadius: '8px',
              position: 'relative',
            }}
          >
            <button
              onClick={() => setLinkDialogOpen(false)}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer',
              }}
            >
              √ó
            </button>
            <h2>{t('support.insertLinkTitle')}</h2>
            <div style={{ marginBottom: '15px' }}>
              <label style={{ display: 'block', marginBottom: '5px' }}>{t('support.linkName')}</label>
              <input
                type="text"
                value={linkName}
                onChange={(e) => setLinkName(e.target.value)}
                style={{ width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
              />
            </div>
            <div style={{ marginBottom: '15px' }}>
              <label style={{ display: 'block', marginBottom: '5px' }}>{t('support.linkUrl')}</label>
              <input
                type="text"
                value={linkUrl}
                onChange={(e) => setLinkUrl(e.target.value)}
                style={{ width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
              />
            </div>
            <div style={{ textAlign: 'right' }}>
              <button
                onClick={() => setLinkDialogOpen(false)}
                style={{
                  backgroundColor: '#ccc',
                  color: 'black',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                  marginRight: '10px',
                }}
              >
                {t('support.cancel')}
              </button>
              <button
                onClick={insertLink}
                style={{
                  backgroundColor: '#007bff',
                  color: 'white',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                }}
              >
                {t('support.insert')}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Image Dialog */}
      {imageDialogOpen && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.5)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
          onClick={() => setImageDialogOpen(false)}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              backgroundColor: 'white',
              width: '400px',
              padding: '20px',
              borderRadius: '8px',
              position: 'relative',
            }}
          >
            <button
              onClick={() => setImageDialogOpen(false)}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer',
              }}
            >
              √ó
            </button>
            <h2>{t('support.insertImageTitle')}</h2>
            <div style={{ marginBottom: '15px' }}>
              <label style={{ display: 'block', marginBottom: '5px' }}>{t('support.imageUrl')}</label>
              <input
                type="text"
                value={imageUrl}
                onChange={(e) => {
                  setImageUrl(e.target.value);
                  setImageFile(null);
                }}
                style={{ width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
              />
            </div>
            <div style={{ marginBottom: '15px', textAlign: 'center' }}>
              <span style={{ display: 'block', marginBottom: '5px' }}>{t('support.or')}</span>
            </div>
            <div style={{ marginBottom: '15px' }}>
              <label htmlFor="support-upload-image" style={{ display: 'block', marginBottom: '5px' }}>{t('support.uploadImage')}</label>
              <input
                id="support-upload-image"
                type="file"
                accept="image/*"
                onChange={handleImageFileChange}
                style={{ width: '100%', padding: '8px 0' }}
              />
              {imageFile && <p style={{ marginTop: '5px' }}>Selected: {imageFile.name}</p>}
            </div>
            <div style={{ textAlign: 'right' }}>
              <button
                onClick={() => setImageDialogOpen(false)}
                style={{
                  backgroundColor: '#ccc',
                  color: 'black',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                  marginRight: '10px',
                }}
              >
                {t('support.cancel')}
              </button>
              <button
                onClick={insertImage}
                style={{
                  backgroundColor: '#007bff',
                  color: 'white',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                }}
              >
                {t('support.insert')}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Code Dialog */}
      {codeDialogOpen && (
        <div
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.5)',
            zIndex: 9999,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
          onClick={() => setCodeDialogOpen(false)}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              backgroundColor: 'white',
              width: '500px',
              height: '400px',
              padding: '20px',
              borderRadius: '8px',
              position: 'relative',
              display: 'flex',
              flexDirection: 'column',
            }}
          >
            <button
              onClick={() => setCodeDialogOpen(false)}
              style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer',
              }}
            >
              √ó
            </button>
            <h2>{t('support.insertCodeTitle')}</h2>
            <div style={{ marginBottom: '15px' }}>
              <label style={{ display: 'block', marginBottom: '5px' }}>{t('support.codeLanguage')}</label>
              <select
                value={codeLanguage}
                onChange={(e) => setCodeLanguage(e.target.value)}
                style={{ width: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }}
              >
                {['Java', 'Python', 'Markdown', 'JavaScript', 'TypeScript', 'CSS', 'HTML', 'JSON', 'YAML', 'XML', 'SQL', 'PL/SQL', 'Groovy', 'Kotlin', 'Dockerfile', 'Text'].map(lang => (
                  <option key={lang} value={lang}>{lang}</option>
                ))}
              </select>
            </div>
            <div style={{ marginBottom: '15px', display: 'flex', gap: '15px' }}>
              <label style={{ display: 'flex', alignItems: 'center' }}>
                <input
                  type="checkbox"
                  checked={showInvisibleChars}
                  onChange={() => setShowInvisibleChars(!showInvisibleChars)}
                  style={{ marginRight: '5px' }}
                />
                {t('support.showInvisibleChars')}
              </label>
              <label style={{ display: 'flex', alignItems: 'center' }}>
                <input
                  type="checkbox"
                  checked={showLineNumbers}
                  onChange={() => setShowLineNumbers(!showLineNumbers)}
                  style={{ marginRight: '5px' }}
                />
                {t('support.showLineNumbers')}
              </label>
            </div>
            <div style={{ flex: 1, marginBottom: '15px' }}>
              <label style={{ display: 'block', marginBottom: '5px' }}>{t('support.codeContent')}</label>
              <textarea
                value={codeContent}
                onChange={(e) => setCodeContent(e.target.value)}
                style={{ width: '100%', height: '100%', padding: '8px', border: '1px solid #ccc', borderRadius: '4px', resize: 'none', fontFamily: 'monospace' }}
              />
            </div>
            <div style={{ textAlign: 'right' }}>
              <button
                onClick={() => setCodeDialogOpen(false)}
                style={{
                  backgroundColor: '#ccc',
                  color: 'black',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                  marginRight: '10px',
                }}
              >
                {t('support.cancel')}
              </button>
              <button
                onClick={insertCode}
                style={{
                  backgroundColor: '#007bff',
                  color: 'white',
                  padding: '0.5rem 1.5rem',
                  border: 'none',
                  borderRadius: '20px',
                  cursor: 'pointer',
                }}
              >
                {t('support.insert')}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Emoji Dialog */}
      {emojiDialogOpen && (
        <div
          style={{
            position: 'fixed',
            top: emojiPosition.top,
            left: emojiPosition.left,
            backgroundColor: 'white',
            width: '338px',
            height: '300px',
            padding: '8px',
            borderRadius: '6px',
            boxShadow: '0 3px 6px rgba(0,0,0,0.2)',
            zIndex: 9999,
            display: 'flex',
            flexDirection: 'column',
          }}
          onClick={(e) => e.stopPropagation()}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
            <h3 style={{ margin: 0, fontSize: '1.35rem' }}>{t('support.selectEmoji')}</h3>
            <button
              onClick={() => setEmojiDialogOpen(false)}
              style={{
                background: 'none',
                border: 'none',
                fontSize: '1.2rem',
                cursor: 'pointer',
                padding: '0 3px',
              }}
            >
              √ó
            </button>
          </div>
          <div style={{ marginBottom: '8px' }}>
            <input
              type="text"
              placeholder={t('support.searchEmoji')}
              value={emojiSearch}
              onChange={(e) => setEmojiSearch(e.target.value)}
              style={{ width: '100%', padding: '3px', border: '1px solid #ccc', borderRadius: '4.5px', fontSize: '1.2rem' }}
            />
          </div>
          <div style={{ flex: 1, overflowY: 'auto', marginBottom: '8px' }}>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: '6px' }}>
              {emojiSearch !== ''
                ? Object.values({
                    smileys: [
                      'üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'ü•∞', 
                      'üòó', 'üòô', 'üòö', 'üôÇ', 'ü§ó', 'ü§©', 'ü§î', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üôÑ', 'üòè', 'üò£', 'üò•', 
                      'üòÆ', 'ü§ê', 'üòØ', 'üò™', 'üò´', 'ü•±', 'üò¥', 'üòå', 'üòõ', 'üòú', 'üòù', 'ü§§', 'üòí', 'üòì', 'üòî', 
                      'üòï', 'üôÉ', 'ü§ë', 'üò≤', 'üôÅ', 'üòñ', 'üòû', 'üòü', 'üò§', 'üò¢', 'üò≠', 'üò¶', 'üòß', 'üò®', 'üò∞', 
                      'üò±', 'ü•µ', 'ü•∂', 'üò≥', 'ü§™', 'üòµ', 'ü•¥', 'üò†', 'üò°', 'ü§¨', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 
                      'ü§ß', 'üòá', 'ü•≥', 'ü•∫', 'ü§•', 'ü§´', 'ü§≠', 'üßê', 'ü§ì', 'üòà', 'üëø', 'ü§°', 'üë∂', 'üßí', 
                      'üë¶', 'üëß', 'üßë', 'üë®', 'üë©', 'üßî', 'üë±', 'üßì', 'üë¥', 'üëµ', 'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 
                      'üôã', 'üßé', 'üôá', 'ü§¶', 'ü§∑', 'üëÆ', 'üïµÔ∏è', 'üíÇ', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï', 
                      'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú', 'üßù', 'üßû', 
                      'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üíÉ', 'üï∫', 'üï¥Ô∏è', 'üëØ', 'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑Ô∏è', 
                      'üèÇ', 'üèåÔ∏è', 'üèÑ', 'üö£', 'üèä', '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§π', 'üßò', 
                      'üõÄ', 'üõå'
                    ],
                    animals: [
                      'üêµ', 'üêí', 'ü¶ç', 'ü¶ß', 'üê∂', 'üêï', 'ü¶Æ', 'üê©', 'üê∫', 'ü¶ä', 'ü¶ù', 'üê±', 'üêà', 'ü¶Å', 'üêØ', 
                      'üêÖ', 'üêÜ', 'üê¥', 'üêé', 'ü¶Ñ', 'ü¶ì', 'ü¶å', 'üêÆ', 'üêÇ', 'üêÉ', 'üêÑ', 'üê∑', 'üêñ', 'üêó', 
                      'üêè', 'üêë', 'üêê', 'üê™', 'üê´', 'ü¶ô', 'ü¶í', 'üêò', 'ü¶è', 'ü¶õ', 'üê≠', 'üêÅ', 'üêÄ', 'üêπ', 
                      'üê∞', 'üêá', 'üêøÔ∏è', 'ü¶î', 'ü¶á', 'üêª', 'üê®', 'üêº', 'ü¶•', 'ü¶¶', 'ü¶®', 'ü¶ò', 'ü¶°', 'üêæ', 'ü¶É', 
                      'üêî', 'üêì', 'üê£', 'üê§', 'üê•', 'üê¶', 'üêß', 'üïäÔ∏è', 'ü¶Ö', 'ü¶Ü', 'ü¶¢', 'ü¶â', 'ü¶©', 
                      'ü¶ö', 'ü¶ú', 'üê∏', 'üêä', 'üê¢', 'ü¶é', 'üêç', 'ü¶ñ', 'ü¶ï', 'ü¶Ç', 'üï∑Ô∏è', 'üï∏Ô∏è', 'üêå', 'ü¶ã', 'üêõ', 
                      'üêú', 'üêù', 'üêû', 'ü¶ó', 'ü¶ü', 'ü¶†', 'üê†', 'üêü', 'üê°', 'ü¶à', 'üêô', 'ü¶ë', 'ü¶û', 
                      'ü¶Ä', 'ü¶ê', 'ü¶™', 'üê≥', 'üêã', 'üê¨', 'üåµ', 'üå≤', 'üå≥', 'üå¥', 'üå±', 'üåø', '‚òòÔ∏è', 
                      'üçÄ', 'üçÅ', 'üçÇ', 'üçÉ', 'üå∑', 'üå∏', 'üíê', 'üåπ', 'ü•Ä', 'üå∫', 'üåª', 'üåº', 'üåΩ', 'üåæ', 'üåø', 
                      'üçá', 'üçà', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçç', 'ü•≠', 'üçé', 'üçè', 'üçê', 'üçë', 'üçí', 'üçì', 
                      'ü•ù', 'üçÖ', 'ü••'
                    ],
                    food: [
                      'üçá', 'üçà', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçç', 'ü•≠', 'üçé', 'üçè', 'üçê', 'üçë', 'üçí', 'üçì',  
                      'ü•ù', 'üçÖ', 'ü••', 'ü•ë', 'üçÜ', 'ü•î', 'ü•ï', 'üåΩ', 'üå∂Ô∏è', 'ü•í', 'ü•¨', 'ü•¶', 'üßÑ', 
                      'üßÖ', 'üçÑ', 'ü•ú', 'üå∞', 'üçû', 'üßÄ', 'ü•ö', 'üçó', 'üçñ', 'ü¶¥', 'üçó', 'ü•©', 'ü•ì', 'üçî', 'üçü', 
                      'üçï', 'üå≠', 'ü•™', 'üåÆ', 'üåØ', 'ü•ô', 'üßÜ', 'ü•ö', 'üç≤', 'üçú', 'üçù', 'üç†', 'üç£', 
                      'üç§', 'üç•', 'ü•Æ', 'üç°', 'ü•ü', 'ü•†', 'ü•°', 'ü¶û', 'ü¶™', 'ü¶Ä', 'ü¶ê', 'ü¶ë', 'üç¶', 'üçß', 'üç®', 
                      'üç©', 'üç™', 'üéÇ', 'üç∞', 'üßÅ', 'ü•ß', 'üç´', 'üç¨', 'üç≠', 'üçÆ', 'üçØ', 'üçº', 'ü•õ', '‚òï', 
                      'üçµ', 'üç∂', 'üçæ', 'üç∑', 'üç∏', 'üçπ', 'üç∫', 'üçª', 'ü•Ç', 'ü•É', 'ü•§', 'üßÉ', 'üßâ', 'üßä', 'ü•¢', 
                      'üç¥', 'ü•Ñ', 'üî™', 'üßÇ'
                    ],
                    activities: [
                      '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 
                      'ü•ç', 'üèè', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', 
                      '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§∫', 'ü§æ', 'üèá', 'üö¥', 'üöµ', 
                      'ü§π', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üé™', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 
                      'ü•Å', 'üé∑', 'üé∫', 'üé∏', 'ü™ï', 'üéª', 'üé≤', 'üß©', 'üß∏',
                      'üé∞', 'üéÆ', 'üé≥', 'üéØ', 'üé±', 'üîÆ', 'üéñÔ∏è', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ'
                    ],
                    travel: [
                      'üöó', 'üöï', 'üöñ', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üõª', 'üöö', 'üöõ', 'üöú', 'ü¶Ø', 
                      'ü¶Ω', 'ü¶º', 'üõµ', 'üö≤', 'üõ¥', 'üõπ', 'üöè', 'üö§', 'üõ¢Ô∏è', '‚õΩ', 'üö®', 'üö•', 'üö¶', 
                      'üõë', 'üöß', '‚öì', '‚õµ', 'üõ∂', 'üö§', 'üõ≥Ô∏è', '‚õ¥Ô∏è', 'üõ•Ô∏è', 'üö¢', '‚úàÔ∏è', 'üõ©Ô∏è', 'üõ´', 'üõ¨', 'ü™Ç', 
                      'üí∫', 'üöÅ', 'üöü', 'üö†', 'üö°', 'üõ∞Ô∏è', 'üöÄ', 'üõ∏', 'üõéÔ∏è', 'üß≥', '‚õ∫', 'üèñÔ∏è', 'üèúÔ∏è', 'üèùÔ∏è', 
                      'üèûÔ∏è', 'üèüÔ∏è', 'üèõÔ∏è', 'üèóÔ∏è', 'üß±', 'üèòÔ∏è', 'üèöÔ∏è', 'üè†', 'üè°', 'üè¢', 'üè£', 'üè§', 
                      'üè•', 'üè¶', 'üè®', 'üè©', 'üè™', 'üè´', 'üè¨', 'üè≠', 'üèØ', 'üè∞', 'üíí', 'üóº', 'üóΩ', '‚õ™', 'üïå', 
                      'üõï', 'üïç', '‚õ©Ô∏è', 'üïã', '‚õ≤', 'üåÅ', 'üåÉ', 'üèôÔ∏è', 'üåÑ', 'üåÖ', 'üåÜ', 'üåá', 'üåâ', '‚ô®Ô∏è', 'üé†', 
                      'üé°', 'üé¢', 'üíà', 'üé™'
                    ],
                    objects: [
                      '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 
                      'üßÆ', 'üé•', 'üéûÔ∏è', 'üé¨', 'üì∫', 'üì∑', 'üì∏', 'üìπ', 'üìº', 'üîç', 'üîé', 'üî¨', 'üî≠', 'üì°', 
                      'üïØÔ∏è', 'üí°', 'üî¶', 'üèÆ', 'ü™î', 'üìî', 'üìï', 'üìñ', 'üìó', 'üìò', 'üìô', 'üìö', 'üìì', 'üìí', 'üìÉ', 
                      'üìú', 'üìÑ', 'üì∞', 'üóûÔ∏è', 'üìë', 'üîñ', 'üè∑Ô∏è', 'üí∞', 'üí¥', 'üíµ', 'üí∂', 'üí∑', 'üí∏', 'üí≥', 
                      'üßæ', 'üíπ', '‚úâÔ∏è', 'üìß', 'üì®', 'üì©', 'üì§', 'üì•', 'üì¶', 'üì´', 'üì™', 'üì¨', 'üì≠', 'üìÆ', 'üó≥Ô∏è', 
                      '‚úèÔ∏è', '‚úíÔ∏è', 'üñãÔ∏è', 'üñäÔ∏è', 'üñåÔ∏è', 'üñçÔ∏è', 'üìù', 'üíº', 'üìÅ', 'üìÇ', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üîí', 
                      'üîì', 'üîè', 'üîê', 'üîë', 'üî®', 'ü™ì', '‚õèÔ∏è', '‚öíÔ∏è', 'üõ†Ô∏è', 'üó°Ô∏è', '‚öîÔ∏è', 'üî´', 'üèπ', 
                      'üõ°Ô∏è', 'üîß', 'üî©', '‚öôÔ∏è', 'üóúÔ∏è', '‚öñÔ∏è', 'ü¶Ø', 'üîó', '‚õìÔ∏è', 'üß∞', 'üß≤', 
                      '‚öóÔ∏è', 'üß™', 'üß´', 'üß¨', 'üî¨', 'üî≠', 'üì°', 'üíâ', 'ü©∏', 'üíä', 'ü©π', 'ü©∫', 'üö™', 'üõèÔ∏è', 'üõãÔ∏è', 
                      'ü™ë', 'üöΩ', 'üöø', 'üõÅ', 'ü™í', 'üß¥', 'üß∑', 'üßπ', 'üß∫', 'üßª', 'üßº', 
                      'üßΩ', 'üßØ', 'üõí'
                    ],
                    symbols: [
                      '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'üíò', 'üíì', 'üíî', 'üíï', 'üíñ', 'üíó', 
                      'üíù', 'üíû', 'üíü', '‚ù£Ô∏è', 'üíå', 'üí§', 'üí¢', 'üí£', 'üí•', 'üí¶', 'üí®', 'üí´', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 
                      'üí≠', 'üï≥Ô∏è', 'üëÅÔ∏è‚Äçüó®Ô∏è', 'üó£Ô∏è', 'üë§', 'üë•', 'üë£', 'üññ', 'üëå', 'ü§è', '‚úåÔ∏è', 'ü§û',  
                      'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§é', 
                      'üëè', 'ü´∂', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶µ', 'ü¶ø', 'ü¶∂', 
                      'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üíØ', 
                      '‚ùå', '‚≠ï', '‚úÖ', '‚úîÔ∏è', '‚ùé', '‚ûï', '‚ûñ', '‚ûó', '‚úñÔ∏è', '‚ôæÔ∏è', '‚ÄºÔ∏è', '‚ÅâÔ∏è', '‚ùì', '‚ùî', '‚ùï', 
                      '‚ùó', '„Ä∞Ô∏è', 'üí±', 'üí≤', '‚öïÔ∏è', '‚ôªÔ∏è', '‚öúÔ∏è', 'üî∞', '‚õé', '‚≠ê', 'üåü', '‚ú®', '‚ö°', '‚òÑÔ∏è', 'üí´', 'üåû', 
                      'üåù', 'üåõ', 'üåú', 'üåé', 'üåç', 'üåè', 'üåï', 'üåë', 'üåí', 'üåì', 'üåî', 'üåñ', 'üåó', 'üåò', 'üåô', 'üåö', 
                      'üå§Ô∏è', '‚õÖ', 'üå•Ô∏è', '‚õàÔ∏è', 'üå¶Ô∏è', 'üåßÔ∏è', 'üå®Ô∏è', 'üå©Ô∏è', 'üå™Ô∏è', 'üå´Ô∏è', 'üå¨Ô∏è', 'üåÄ', 'üåà', 'üåÇ', '‚òî', 
                      '‚õ±Ô∏è', '‚öΩ', '‚öæ', 'üèÄ', 'üèê', 'üèà', 'üèâ', 'üéæ', 'ü•è', 'üé≥', 'üèè', 'üèë', 'üèí', 'ü•ç', 'üèì', 'üè∏', 
                      'ü•ä', 'ü•ã', 'üéØ', '‚õ≥', '‚õ∏Ô∏è', 'ü§ø', 'üéΩ', 'üéø', 'üõ∑', 'ü•å', 'üéØ', 'ü™Ä', 'ü™Å', 'üé±', 'üîÆ', 
                      'üßß', 'üéé', 'üéè', 'üéê', 'üß®', 'üéä', 'üéã', 'üéâ', 'üéà', 'üéå', 'üéÄ', 'üéÅ', 'üéóÔ∏è', 'üéüÔ∏è', 
                      'üéñÔ∏è', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ'
                    ]
                  })
                    .flat()
                    .filter((emoji) => {
                      const search = emojiSearch.toLowerCase();
                      const names = emojiNameMap[emoji] || [];
                      return emoji.includes(search) || names.some(n => n.includes(search));
                    })
                    .map((emoji) => (
                      <button
                        key={emoji}
                        onClick={() => insertEmoji(emoji)}
                        style={{
                          fontSize: '1.05rem',
                          background: 'none',
                          border: 'none',
                          cursor: 'pointer',
                          padding: '3px',
                          textAlign: 'center',
                          borderRadius: '5px',
                          transition: 'background 0.15s',
                        }}
                        onMouseOver={e => (e.currentTarget.style.background = '#f0f0f0')}
                        onMouseOut={e => (e.currentTarget.style.background = 'none')}
                      >
                        {emoji}
                      </button>
                    ))
                : (
                  (activeEmojiTab === 'smileys' ? [
                    'üòÄ', 'üòÅ', 'üòÇ', 'ü§£', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòâ', 'üòä', 'üòã', 'üòé', 'üòç', 'üòò', 'ü•∞', 
                    'üòó', 'üòô', 'üòö', 'üôÇ', 'ü§ó', 'ü§©', 'ü§î', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üôÑ', 'üòè', 'üò£', 'üò•', 
                    'üòÆ', 'ü§ê', 'üòØ', 'üò™', 'üò´', 'ü•±', 'üò¥', 'üòå', 'üòõ', 'üòú', 'üòù', 'ü§§', 'üòí', 'üòì', 'üòî', 
                    'üòï', 'üôÉ', 'ü§ë', 'üò≤', 'üôÅ', 'üòñ', 'üòû', 'üòü', 'üò§', 'üò¢', 'üò≠', 'üò¶', 'üòß', 'üò®', 'üò∞', 
                    'üò±', 'ü•µ', 'ü•∂', 'üò≥', 'ü§™', 'üòµ', 'ü•¥', 'üò†', 'üò°', 'ü§¨', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 
                    'ü§ß', 'üòá', 'ü•≥', 'ü•∫', 'ü§•', 'ü§´', 'ü§≠', 'üßê', 'ü§ì', 'üòà', 'üëø', 'ü§°', 'üë∂', 'üßí', 
                    'üë¶', 'üëß', 'üßë', 'üë®', 'üë©', 'üßî', 'üë±', 'üßì', 'üë¥', 'üëµ', 'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 
                    'üôã', 'üßé', 'üôá', 'ü§¶', 'ü§∑', 'üëÆ', 'üïµÔ∏è', 'üíÇ', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï', 
                    'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú', 'üßù', 'üßû', 
                    'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üíÉ', 'üï∫', 'üï¥Ô∏è', 'üëØ', 'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑Ô∏è', 
                    'üèÇ', 'üèåÔ∏è', 'üèÑ', 'üö£', 'üèä', '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§π', 'üßò', 
                    'üõÄ', 'üõå'
                  ] : activeEmojiTab === 'animals' ? [
                    'üêµ', 'üêí', 'ü¶ç', 'ü¶ß', 'üê∂', 'üêï', 'ü¶Æ', 'üê©', 'üê∫', 'ü¶ä', 'ü¶ù', 'üê±', 'üêà', 'ü¶Å', 'üêØ', 
                    'üêÖ', 'üêÜ', 'üê¥', 'üêé', 'ü¶Ñ', 'ü¶ì', 'ü¶å', 'üêÆ', 'üêÇ', 'üêÉ', 'üêÑ', 'üê∑', 'üêñ', 'üêó', 
                    'üêè', 'üêë', 'üêê', 'üê™', 'üê´', 'ü¶ô', 'ü¶í', 'üêò', 'ü¶è', 'ü¶õ', 'üê≠', 'üêÅ', 'üêÄ', 'üêπ', 
                    'üê∞', 'üêá', 'üêøÔ∏è', 'ü¶î', 'ü¶á', 'üêª', 'üê®', 'üêº', 'ü¶•', 'ü¶¶', 'ü¶®', 'ü¶ò', 'ü¶°', 'üêæ', 'ü¶É', 
                    'üêî', 'üêì', 'üê£', 'üê§', 'üê•', 'üê¶', 'üêß', 'üïäÔ∏è', 'ü¶Ö', 'ü¶Ü', 'ü¶¢', 'ü¶â', 'ü¶©', 
                    'ü¶ö', 'ü¶ú', 'üê∏', 'üêä', 'üê¢', 'ü¶é', 'üêç', 'ü¶ñ', 'ü¶ï', 'ü¶Ç', 'üï∑Ô∏è', 'üï∏Ô∏è', 'üêå', 'ü¶ã', 'üêõ', 
                    'üêú', 'üêù', 'üêû', 'ü¶ó', 'ü¶ü', 'ü¶†', 'üê†', 'üêü', 'üê°', 'ü¶à', 'üêô', 'ü¶ë', 'ü¶û', 
                    'ü¶Ä', 'ü¶ê', 'ü¶™', 'üê≥', 'üêã', 'üê¨', 'üåµ', 'üå≤', 'üå≥', 'üå¥', 'üå±', 'üåø', '‚òòÔ∏è', 
                    'üçÄ', 'üçÅ', 'üçÇ', 'üçÉ', 'üå∑', 'üå∏', 'üíê', 'üåπ', 'ü•Ä', 'üå∫', 'üåª', 'üåº', 'üåΩ', 'üåæ', 'üåø', 
                    'üçá', 'üçà', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçç', 'ü•≠', 'üçé', 'üçè', 'üçê', 'üçë', 'üçí', 'üçì', 
                    'ü•ù', 'üçÖ', 'ü••'
                  ] : activeEmojiTab === 'food' ? [
                    'üçá', 'üçà', 'üçâ', 'üçä', 'üçã', 'üçå', 'üçç', 'ü•≠', 'üçé', 'üçè', 'üçê', 'üçë', 'üçí', 'üçì',  
                    'ü•ù', 'üçÖ', 'ü••', 'ü•ë', 'üçÜ', 'ü•î', 'ü•ï', 'üåΩ', 'üå∂Ô∏è', 'ü•í', 'ü•¨', 'ü•¶', 'üßÑ', 
                    'üßÖ', 'üçÑ', 'ü•ú', 'üå∞', 'üçû', 'üßÄ', 'ü•ö', 'üçó', 'üçñ', 'ü¶¥', 'üçó', 'ü•©', 'ü•ì', 'üçî', 'üçü', 
                    'üçï', 'üå≠', 'ü•™', 'üåÆ', 'üåØ', 'ü•ô', 'üßÜ', 'ü•ö', 'üç≤', 'üçú', 'üçù', 'üç†', 'üç£', 
                    'üç§', 'üç•', 'ü•Æ', 'üç°', 'ü•ü', 'ü•†', 'ü•°', 'ü¶û', 'ü¶™', 'ü¶Ä', 'ü¶ê', 'ü¶ë', 'üç¶', 'üçß', 'üç®', 
                    'üç©', 'üç™', 'üéÇ', 'üç∞', 'üßÅ', 'ü•ß', 'üç´', 'üç¨', 'üç≠', 'üçÆ', 'üçØ', 'üçº', 'ü•õ', '‚òï', 
                    'üçµ', 'üç∂', 'üçæ', 'üç∑', 'üç∏', 'üçπ', 'üç∫', 'üçª', 'ü•Ç', 'ü•É', 'ü•§', 'üßÉ', 'üßâ', 'üßä', 'ü•¢', 
                    'üç¥', 'ü•Ñ', 'üî™', 'üßÇ'
                  ] : activeEmojiTab === 'activities' ? [
                    '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 
                    'ü•ç', 'üèè', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', 
                    '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§∫', 'ü§æ', 'üèá', 'üö¥', 'üöµ', 
                    'ü§π', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üé™', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéπ', 
                    'ü•Å', 'üé∑', 'üé∫', 'üé∏', 'ü™ï', 'üéª', 'üé≤', 'üß©', 'üß∏',
                    'üé∞', 'üéÆ', 'üé≥', 'üéØ', 'üé±', 'üîÆ', 'üéñÔ∏è', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ'
                  ] : activeEmojiTab === 'travel' ? [
                    'üöó', 'üöï', 'üöñ', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê', 'üõª', 'üöö', 'üöõ', 'üöú', 'ü¶Ø', 
                    'ü¶Ω', 'ü¶º', 'üõµ', 'üö≤', 'üõ¥', 'üõπ', 'üöè', 'üö§', 'üõ¢Ô∏è', '‚õΩ', 'üö®', 'üö•', 'üö¶', 
                    'üõë', 'üöß', '‚öì', '‚õµ', 'üõ∂', 'üö§', 'üõ≥Ô∏è', '‚õ¥Ô∏è', 'üõ•Ô∏è', 'üö¢', '‚úàÔ∏è', 'üõ©Ô∏è', 'üõ´', 'üõ¨', 'ü™Ç', 
                    'üí∫', 'üöÅ', 'üöü', 'üö†', 'üö°', 'üõ∞Ô∏è', 'üöÄ', 'üõ∏', 'üõéÔ∏è', 'üß≥', '‚õ∫', 'üèñÔ∏è', 'üèúÔ∏è', 'üèùÔ∏è', 
                    'üèûÔ∏è', 'üèüÔ∏è', 'üèõÔ∏è', 'üèóÔ∏è', 'üß±', 'üèòÔ∏è', 'üèöÔ∏è', 'üè†', 'üè°', 'üè¢', 'üè£', 'üè§', 
                    'üè•', 'üè¶', 'üè®', 'üè©', 'üè™', 'üè´', 'üè¨', 'üè≠', 'üèØ', 'üè∞', 'üíí', 'üóº', 'üóΩ', '‚õ™', 'üïå', 
                    'üõï', 'üïç', '‚õ©Ô∏è', 'üïã', '‚õ≤', 'üåÅ', 'üåÉ', 'üèôÔ∏è', 'üåÑ', 'üåÖ', 'üåÜ', 'üåá', 'üåâ', '‚ô®Ô∏è', 'üé†', 
                    'üé°', 'üé¢', 'üíà', 'üé™'
                  ] : activeEmojiTab === 'objects' ? [
                    '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 
                    'üßÆ', 'üé•', 'üéûÔ∏è', 'üé¨', 'üì∫', 'üì∑', 'üì∏', 'üìπ', 'üìº', 'üîç', 'üîé', 'üî¨', 'üî≠', 'üì°', 
                    'üïØÔ∏è', 'üí°', 'üî¶', 'üèÆ', 'ü™î', 'üìî', 'üìï', 'üìñ', 'üìó', 'üìò', 'üìô', 'üìö', 'üìì', 'üìí', 'üìÉ', 
                    'üìú', 'üìÑ', 'üì∞', 'üóûÔ∏è', 'üìë', 'üîñ', 'üè∑Ô∏è', 'üí∞', 'üí¥', 'üíµ', 'üí∂', 'üí∑', 'üí∏', 'üí≥', 
                    'üßæ', 'üíπ', '‚úâÔ∏è', 'üìß', 'üì®', 'üì©', 'üì§', 'üì•', 'üì¶', 'üì´', 'üì™', 'üì¨', 'üì≠', 'üìÆ', 'üó≥Ô∏è', 
                    '‚úèÔ∏è', '‚úíÔ∏è', 'üñãÔ∏è', 'üñäÔ∏è', 'üñåÔ∏è', 'üñçÔ∏è', 'üìù', 'üíº', 'üìÅ', 'üìÇ', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üîí', 
                    'üîì', 'üîè', 'üîê', 'üîë', 'üî®', 'ü™ì', '‚õèÔ∏è', '‚öíÔ∏è', 'üõ†Ô∏è', 'üó°Ô∏è', '‚öîÔ∏è', 'üî´', 'üèπ', 
                    'üõ°Ô∏è', 'üîß', 'üî©', '‚öôÔ∏è', 'üóúÔ∏è', '‚öñÔ∏è', 'ü¶Ø', 'üîó', '‚õìÔ∏è', 'üß∞', 'üß≤', 
                    '‚öóÔ∏è', 'üß™', 'üß´', 'üß¨', 'üî¨', 'üî≠', 'üì°', 'üíâ', 'ü©∏', 'üíä', 'ü©π', 'ü©∫', 'üö™', 'üõèÔ∏è', 'üõãÔ∏è', 
                    'ü™ë', 'üöΩ', 'üöø', 'üõÅ', 'ü™í', 'üß¥', 'üß∑', 'üßπ', 'üß∫', 'üßª', 'üßº', 
                    'üßΩ', 'üßØ', 'üõí'
                  ] : activeEmojiTab === 'symbols' ? [
                    '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'üíò', 'üíì', 'üíî', 'üíï', 'üíñ', 'üíó', 
                    'üíù', 'üíû', 'üíü', '‚ù£Ô∏è', 'üíå', 'üí§', 'üí¢', 'üí£', 'üí•', 'üí¶', 'üí®', 'üí´', 'üí¨', 'üó®Ô∏è', 'üóØÔ∏è', 
                    'üí≠', 'üï≥Ô∏è', 'üëÅÔ∏è‚Äçüó®Ô∏è', 'üó£Ô∏è', 'üë§', 'üë•', 'üë£', 'üññ', 'üëå', 'ü§è', '‚úåÔ∏è', 'ü§û',  
                    'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', '‚úä', 'üëä', 'ü§õ', 'ü§é', 
                    'üëè', 'ü´∂', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶µ', 'ü¶ø', 'ü¶∂', 
                    'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üíØ', 
                    '‚ùå', '‚≠ï', '‚úÖ', '‚úîÔ∏è', '‚ùé', '‚ûï', '‚ûñ', '‚ûó', '‚úñÔ∏è', '‚ôæÔ∏è', '‚ÄºÔ∏è', '‚ÅâÔ∏è', '‚ùì', '‚ùî', '‚ùï', 
                    '‚ùó', '„Ä∞Ô∏è', 'üí±', 'üí≤', '‚öïÔ∏è', '‚ôªÔ∏è', '‚öúÔ∏è', 'üî∞', '‚õé', '‚≠ê', 'üåü', '‚ú®', '‚ö°', '‚òÑÔ∏è', 'üí´', 'üåû', 
                    'üåù', 'üåõ', 'üåú', 'üåé', 'üåç', 'üåè', 'üåï', 'üåë', 'üåí', 'üåì', 'üåî', 'üåñ', 'üåó', 'üåò', 'üåô', 'üåö', 
                    'üå§Ô∏è', '‚õÖ', 'üå•Ô∏è', '‚õàÔ∏è', 'üå¶Ô∏è', 'üåßÔ∏è', 'üå®Ô∏è', 'üå©Ô∏è', 'üå™Ô∏è', 'üå´Ô∏è', 'üå¨Ô∏è', 'üåÄ', 'üåà', 'üåÇ', '‚òî', 
                    '‚õ±Ô∏è', '‚öΩ', '‚öæ', 'üèÄ', 'üèê', 'üèà', 'üèâ', 'üéæ', 'ü•è', 'üé≥', 'üèè', 'üèë', 'üèí', 'ü•ç', 'üèì', 'üè∏', 
                    'ü•ä', 'ü•ã', 'üéØ', '‚õ≥', '‚õ∏Ô∏è', 'ü§ø', 'üéΩ', 'üéø', 'üõ∑', 'ü•å', 'üéØ', 'ü™Ä', 'ü™Å', 'üé±', 'üîÆ', 
                    'üßß', 'üéé', 'üéè', 'üéê', 'üß®', 'üéä', 'üéã', 'üéâ', 'üéà', 'üéå', 'üéÄ', 'üéÅ', 'üéóÔ∏è', 'üéüÔ∏è', 
                    'üéñÔ∏è', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ'
                  ] : [])
                ).map((emoji) => (
                  <button
                    key={emoji}
                    onClick={() => insertEmoji(emoji)}
                    style={{
                      fontSize: '1.05rem',
                      background: 'none',
                      border: 'none',
                      cursor: 'pointer',
                      padding: '3px',
                      textAlign: 'center',
                      borderRadius: '5px',
                      transition: 'background 0.15s',
                    }}
                    onMouseOver={e => (e.currentTarget.style.background = '#f0f0f0')}
                    onMouseOut={e => (e.currentTarget.style.background = 'none')}
                  >
                    {emoji}
                  </button>
                ))
              }
            </div>
          </div>
          <div style={{ display: 'flex', borderTop: '1px solid #eee', paddingTop: '8px', flexWrap: 'nowrap', overflowX: 'auto', gap: '4px', justifyContent: 'center' }}>
            <button 
              onClick={() => setActiveEmojiTab('smileys')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'smileys' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'smileys' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiSmileys')}
            >
              üòÉ
            </button>
            <button 
              onClick={() => setActiveEmojiTab('animals')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'animals' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'animals' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiAnimals')}
            >
              üêª
            </button>
            <button 
              onClick={() => setActiveEmojiTab('food')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'food' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'food' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiFood')}
            >
              üçî
            </button>
            <button 
              onClick={() => setActiveEmojiTab('activities')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'activities' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'activities' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiActivities')}
            >
              ‚öΩ
            </button>
            <button 
              onClick={() => setActiveEmojiTab('travel')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'travel' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'travel' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiTravel')}
            >
              üöñ
            </button>
            <button 
              onClick={() => setActiveEmojiTab('objects')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'objects' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'objects' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiObjects')}
            >
              üí°
            </button>
            <button 
              onClick={() => setActiveEmojiTab('symbols')}
              style={{
                padding: '3px 8px',
                background: activeEmojiTab === 'symbols' ? '#eee' : 'none',
                border: 'none',
                borderBottom: activeEmojiTab === 'symbols' ? '3px solid #007bff' : 'none',
                cursor: 'pointer',
                fontSize: '0.75rem',
                minWidth: '32px',
              }}
              title={t('support.emojiSymbols')}
            >
              ‚ù§Ô∏è
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Support;
