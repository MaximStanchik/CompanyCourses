generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Course Course[]
}

model Course {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String?
  category      Int?
  Category      Category?      @relation(fields: [category], references: [id], onDelete: Cascade)
  enrollments   Enrollment[]
  lectures      Lecture[]
  notifications Notification[]
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  user_id   Int?
  course_id Int?
  approved  Boolean @default(false)
  Course    Course? @relation(fields: [course_id], references: [id], onDelete: Cascade)
  User      User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Lecture {
  id        Int     @id @default(autoincrement())
  name      String
  videoLink String?
  content   String?
  course_id Int?
  Course    Course? @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  role       Roles        @default(USER)
  Enrollment Enrollment[]
  Profile    Profile?
}

model Profile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  handle         String
  skills         String[]
  bio            String?
  githubusername String?
  date           DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id       Int      @id @default(autoincrement())
  courseId Int?
  content  String
  date     DateTime @default(now())
  course   Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum Roles {
  ADMIN
  USER
}
